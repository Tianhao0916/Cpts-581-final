/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 05 16:53:05 PST 2021
 */

package p3;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.fail;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.condition.HasMethod;
import org.apache.tools.ant.types.CommandlineJava;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.types.Resource;
import org.apache.tools.ant.types.ResourceCollection;
import org.apache.tools.ant.types.XMLCatalog;
import org.apache.tools.ant.types.ZipFileSet;
import org.apache.tools.ant.types.ZipScanner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class Jar_ESTest extends Jar_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Jar jar0 = new Jar();
      ResourceCollection[] resourceCollectionArray0 = new ResourceCollection[1];
      XMLCatalog xMLCatalog0 = new XMLCatalog();
      Path path0 = xMLCatalog0.createCatalogPath();
      resourceCollectionArray0[0] = (ResourceCollection) path0;
      Resource[][] resourceArray0 = jar0.grabNonFileSetResources(resourceCollectionArray0);
      assertEquals(1, resourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Jar jar0 = new Jar();
      ResourceCollection[] resourceCollectionArray0 = new ResourceCollection[0];
      Resource[][] resourceArray0 = jar0.grabNonFileSetResources(resourceCollectionArray0);
      assertEquals(0, resourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Jar jar0 = new Jar();
      ResourceCollection[] resourceCollectionArray0 = new ResourceCollection[3];
      XMLCatalog xMLCatalog0 = new XMLCatalog();
      Path path0 = xMLCatalog0.createCatalogPath();
      resourceCollectionArray0[0] = (ResourceCollection) path0;
      resourceCollectionArray0[1] = (ResourceCollection) path0;
      resourceCollectionArray0[2] = (ResourceCollection) path0;
      Resource[][] resourceArray0 = jar0.grabManifests(resourceCollectionArray0);
      assertEquals(3, resourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Jar jar0 = new Jar();
      Project project0 = new Project();
      jar0.project = project0;
      Project project1 = jar0.getProject();
      assertSame(project1, project0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Jar jar0 = new Jar();
      // Undeclared exception!
      try { 
        jar0.grabResources((FileSet[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("p3.Jar", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Jar jar0 = new Jar();
      ResourceCollection[] resourceCollectionArray0 = new ResourceCollection[8];
      CommandlineJava commandlineJava0 = new CommandlineJava();
      Project project0 = new Project();
      Path path0 = commandlineJava0.createBootclasspath(project0);
      resourceCollectionArray0[0] = (ResourceCollection) path0;
      resourceCollectionArray0[1] = (ResourceCollection) path0;
      FileSet fileSet0 = new FileSet();
      resourceCollectionArray0[2] = (ResourceCollection) fileSet0;
      // Undeclared exception!
      try { 
        jar0.grabNonFileSetResources(resourceCollectionArray0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No directory specified for FileSet.
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Jar jar0 = new Jar();
      ResourceCollection[] resourceCollectionArray0 = new ResourceCollection[5];
      // Undeclared exception!
      try { 
        jar0.grabNonFileSetResources(resourceCollectionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("p3.Jar", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Jar jar0 = new Jar();
      Project project0 = jar0.getProject();
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Jar jar0 = new Jar();
      FileSet[] fileSetArray0 = new FileSet[5];
      ZipFileSet zipFileSet0 = new ZipFileSet();
      zipFileSet0.setFullpath("k");
      fileSetArray0[0] = (FileSet) zipFileSet0;
      // Undeclared exception!
      try { 
        jar0.grabResources(fileSetArray0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No directory specified for ZipFileSet.
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSet[] fileSetArray0 = new FileSet[20];
      ZipFileSet zipFileSet0 = new ZipFileSet();
      zipFileSet0.setPrefix("K");
      fileSetArray0[0] = (FileSet) zipFileSet0;
      Jar jar0 = new Jar();
      // Undeclared exception!
      try { 
        jar0.grabManifests(fileSetArray0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No directory specified for ZipFileSet.
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Jar jar0 = new Jar();
      ResourceCollection[] resourceCollectionArray0 = new ResourceCollection[7];
      ZipScanner zipScanner0 = new ZipScanner();
      Resource resource0 = zipScanner0.getResource("");
      resourceCollectionArray0[0] = (ResourceCollection) resource0;
      HasMethod hasMethod0 = new HasMethod();
      Path path0 = hasMethod0.createClasspath();
      resourceCollectionArray0[1] = (ResourceCollection) path0;
      resourceCollectionArray0[2] = (ResourceCollection) resource0;
      resourceCollectionArray0[3] = (ResourceCollection) path0;
      resourceCollectionArray0[4] = (ResourceCollection) path0;
      resourceCollectionArray0[5] = (ResourceCollection) path0;
      FileSet fileSet0 = new FileSet();
      resourceCollectionArray0[6] = (ResourceCollection) fileSet0;
      // Undeclared exception!
      try { 
        jar0.grabManifests(resourceCollectionArray0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No directory specified for FileSet.
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Jar jar0 = new Jar();
      FileSet[] fileSetArray0 = new FileSet[0];
      Resource[][] resourceArray0 = jar0.grabResources(fileSetArray0);
      assertEquals(0, resourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Jar jar0 = new Jar();
      ResourceCollection[] resourceCollectionArray0 = new ResourceCollection[7];
      ZipScanner zipScanner0 = new ZipScanner();
      Resource resource0 = zipScanner0.getResource("");
      resourceCollectionArray0[0] = (ResourceCollection) resource0;
      HasMethod hasMethod0 = new HasMethod();
      Path path0 = hasMethod0.createClasspath();
      resourceCollectionArray0[1] = (ResourceCollection) path0;
      Resource resource1 = zipScanner0.getResource("5");
      resourceCollectionArray0[2] = (ResourceCollection) resource1;
      // Undeclared exception!
      try { 
        jar0.grabManifests(resourceCollectionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("p3.Jar", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Jar jar0 = new Jar();
      ResourceCollection[] resourceCollectionArray0 = new ResourceCollection[9];
      Resource resource0 = new Resource("META-INF/MANIFEST.MF", true, 0L);
      resourceCollectionArray0[0] = (ResourceCollection) resource0;
      // Undeclared exception!
      try { 
        jar0.grabManifests(resourceCollectionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("p3.Jar", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Jar jar0 = new Jar();
      FileSet[] fileSetArray0 = new FileSet[0];
      Resource[][] resourceArray0 = jar0.grabManifests(fileSetArray0);
      assertEquals(0, resourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSet[] fileSetArray0 = new FileSet[20];
      ZipFileSet zipFileSet0 = new ZipFileSet();
      fileSetArray0[0] = (FileSet) zipFileSet0;
      Jar jar0 = new Jar();
      // Undeclared exception!
      try { 
        jar0.grabManifests(fileSetArray0);
        fail("Expecting exception: BuildException");
      
      } catch(BuildException e) {
         //
         // No directory specified for ZipFileSet.
         //
         verifyException("org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }
}
