/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 05 16:51:15 PST 2021
 */

package p2;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class TarHeader_ESTest extends TarHeader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = TarHeader.getCheckSumOctalBytes(0L, byteArray0, (byte)3, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)48, (byte)0, (byte)32, (byte)0}, byteArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      int int0 = TarHeader.getOctalBytes(0L, byteArray0, 0, 5);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      int int0 = TarHeader.getLongOctalBytes((-1L), byteArray0, 0, 2);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)32, (byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = TarHeader.getLongOctalBytes((-1L), byteArray0, 0, 1);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TarHeader tarHeader0 = new TarHeader();
      byte[] byteArray0 = new byte[8];
      int int0 = TarHeader.getNameBytes(tarHeader0.magic, byteArray0, 0, 6);
      assertEquals(0, tarHeader0.groupId);
      assertArrayEquals(new byte[] {(byte)117, (byte)115, (byte)116, (byte)97, (byte)114, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TarHeader tarHeader0 = new TarHeader();
      StringBuffer stringBuffer0 = tarHeader0.magic;
      byte[] byteArray0 = new byte[8];
      int int0 = TarHeader.getNameBytes(stringBuffer0, byteArray0, 0, 2);
      assertArrayEquals(new byte[] {(byte)117, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, int0);
      assertEquals(0, tarHeader0.groupId);
      assertEquals(0, tarHeader0.userId);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      StringBuffer stringBuffer0 = TarHeader.parseName(byteArray0, 0, 1);
      assertEquals("\u0001", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      long long0 = TarHeader.parseOctal(byteArray0, 0, (-1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)49;
      long long0 = TarHeader.parseOctal(byteArray0, (byte)0, (byte)3);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      TarHeader tarHeader0 = new TarHeader();
      int int0 = TarHeader.getNameBytes(tarHeader0.groupName, byteArray0, 0, (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(0, tarHeader0.userId);
      assertEquals(0, tarHeader0.groupId);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TarHeader tarHeader0 = new TarHeader();
      tarHeader0.name.append((float) 0);
      tarHeader0.getName();
      assertEquals("0.0", tarHeader0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TarHeader tarHeader0 = new TarHeader();
      tarHeader0.clone();
      assertEquals(0, tarHeader0.userId);
      assertEquals(0, tarHeader0.groupId);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        TarHeader.parseOctal((byte[]) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("p2.TarHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        TarHeader.parseOctal(byteArray0, (byte)1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("p2.TarHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        TarHeader.parseName((byte[]) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("p2.TarHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        TarHeader.parseName(byteArray0, 0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        TarHeader.parseName(byteArray0, (-1), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("p2.TarHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        TarHeader.getOctalBytes(0L, (byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("p2.TarHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        TarHeader.getOctalBytes(0, byteArray0, (byte)0, (byte) (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("p2.TarHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TarHeader tarHeader0 = new TarHeader();
      // Undeclared exception!
      try { 
        TarHeader.getNameBytes(tarHeader0.name, (byte[]) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("p2.TarHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TarHeader tarHeader0 = new TarHeader();
      tarHeader0.name = null;
      // Undeclared exception!
      try { 
        tarHeader0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("p2.TarHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        TarHeader.getLongOctalBytes(0L, (byte[]) null, 0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        TarHeader.getLongOctalBytes(0L, byteArray0, 0, (byte) (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("p2.TarHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        TarHeader.getCheckSumOctalBytes(0, (byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("p2.TarHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        TarHeader.getCheckSumOctalBytes(0L, byteArray0, (byte)0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("p2.TarHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      int int0 = TarHeader.getOctalBytes(1L, byteArray0, 0, 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      int int0 = TarHeader.getOctalBytes(1L, byteArray0, 0, 3);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        TarHeader.getOctalBytes(0L, byteArray0, 2, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("p2.TarHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TarHeader tarHeader0 = new TarHeader();
      String string0 = tarHeader0.getName();
      assertEquals("", string0);
      assertEquals(0, tarHeader0.userId);
      assertEquals(0, tarHeader0.groupId);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        TarHeader.getLongOctalBytes(1L, byteArray0, 0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TarHeader tarHeader0 = new TarHeader();
      byte[] byteArray0 = new byte[0];
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.insert(0, 0.0F);
      tarHeader0.linkName = stringBuffer0;
      // Undeclared exception!
      try { 
        TarHeader.getNameBytes(tarHeader0.linkName, byteArray0, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("p2.TarHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TarHeader tarHeader0 = new TarHeader();
      byte[] byteArray0 = new byte[9];
      int int0 = TarHeader.getNameBytes(tarHeader0.linkName, byteArray0, (byte)0, 0);
      assertEquals(0, int0);
      assertEquals(0, tarHeader0.groupId);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-1);
      StringBuffer stringBuffer0 = TarHeader.parseName(byteArray0, 1, 1);
      assertEquals("\uFFFF", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)32;
      long long0 = TarHeader.parseOctal(byteArray0, (byte)0, (byte)4);
      assertEquals((-3431L), long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)48;
      long long0 = TarHeader.parseOctal(byteArray0, 1, (byte)4);
      assertEquals((-27592L), long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      long long0 = TarHeader.parseOctal(byteArray0, (byte)0, 1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        TarHeader.getCheckSumOctalBytes(0L, byteArray0, (byte)0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("p2.TarHeader", e);
      }
  }
}
